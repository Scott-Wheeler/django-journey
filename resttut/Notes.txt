---------------
1 Serialization
---------------
Use a Serializer(rest_framework.serializer.ModelSerializer) to serialize to JSON and create and update instances
If implementing a custom serializer, implement create and update methods
Serializer classes are similar to Form classes
code = serializers.CharField(style={'base_template': 'textarea.html'}) 
.. is similar to forms.CharField(widget=widgets.Textarea)

# serialization
from rest_framework.renderers import JSONRenderer

snippet = Snippet(code='print("hello world")')
serializer = SnippetSerializer(snippet)
content = JSONRenderer().render(serializer.data)

# deserialization
from django.utils.six import BytesIO
from rest_framework.parsers import JSONParser

stream = BytesIO(content)
data = JSONParser().parse(stream)
serializer = SnippetSerializer(data=data)
serializer.is_valid()
serializer.validated_data
snippet = serializer.save()

implement the views to return JsonResponse and use GET, POST, PUT, DELETE
httpie to test


------------------------
2 Requests and Responses
------------------------

rest_framework has a Request object that extends HttpRequest
request.POST  # Only handles form data.  Only works for 'POST' method.
request.data  # Handles arbitrary data.  Works for 'POST', 'PUT' and 'PATCH' methods.

rest_framework also introduces Response object that is a type of TemplateResponse that takes unrendered content and uses content negotiation to determine the correct content type to return to the client.
return Response(data)  # Renders to content type as requested by the client.

rest_framework.status contains status codes with explicit names

use @api_view and ApiView to wrap views
ensures receiving Request instances in the view
adds context to Response objects so that content negotiation can be performed
returns 405 Method Not Allowed responses when appropriate
handles any ParseError exceptions when accessing request.data with malformed input.

using the Response object, it is no longer necessary to return JSON, it returns the appropriate content type for the client. Similar for Request. Can accept/emit any type.

format suffixes allow for choosing response format in urls
eg: http://example.com/api/items/4.json
it's only necessary to add ", format=None" to the view function headers. It seems to work without doing anything to the format parameter in the view. I guess it automatically passes it to the Response 

To control Response using Accept header:
http http://127.0.0.1:8000/snippets/ Accept:application/json  # Request JSON
http http://127.0.0.1:8000/snippets/ Accept:text/html         # Request HTML

To control Response using format suffix:
http http://127.0.0.1:8000/snippets.json  # JSON suffix
http http://127.0.0.1:8000/snippets.api   # Browsable API suffix

To control Request using the Content-Type header.
# POST using form data
http --form POST http://127.0.0.1:8000/snippets/ code="print(123)"
# POST using JSON
http --json POST http://127.0.0.1:8000/snippets/ code="print(456)"

http --debug ...

access with a browser returns a fully web-browsable HTML-formatted representation of the resource which is a huge useability win and makes developing and using the API easier

customizing the browsable api:
http://www.django-rest-framework.org/topics/browsable-api/


-------------------
3 Class based views
-------------------

ApiView

with mixins it is possible to compose views atop GenericAPIView and simply map http methods to the mixin methods

with the mixins, can i just do "get = list" and "post = create"? Probably

ListModelMixin
CreateModelMixin

RetrieveModelMixin
UpdateModelMixin
DestroyModelMixin

even better is using the generic API views
generics.ListAPIView
generics.RetrieveUpdateDestroyAPIView
then I only have to set "queryset = Snippet.objects.all()" and "serializer_class = SnippetSerializer"


------------------------------
4 Authentication & Permissions
------------------------------

    Code snippets are always associated with a creator.
    Only authenticated users may create snippets.
    Only the creator of a snippet may update or delete it.
    Unauthenticated requests should have full read-only access

use pygments to highlight snippets on Snippet.save()
make users with createsuperuser

create a UserSerializer to add representations of Users to the API

Because 'snippets' is a reverse relationship on the User model, it will not be included by default when using the ModelSerializer class, so we needed to add an explicit field for it.

to use read-only views for the user representations, use the ListAPIView and RetrieveAPIView generic class-based views.

django.contrib.auth.models.User is sent as a property of the request    
override .perform_create() on the snippet views

The source kwargument controls which attribute is used to populate a field,
serializers.ReadOnlyField is like an untyped serializers.CharField(read_only=True)

add login and logout views to the browsable api by simply including this urlpattern:
url(r'^api-auth/', include('rest_framework.urls')),

create custom permissions in <app>/permissions.py

the login doesn't work.
    I can't create snippets from the list view when authenticated.
    when logged in as the wrong user, the detail page accepts PUT, PATCH, DELETE

    http -a other:otherpassword POST http://127.0.0.1:8000/snippets/ code="print(123)"
    response is "Method Not Allowed"
    grrrr

    figured it out it's because I was using ListAPIView when I should have been using ListCreateAPIView



----------------------------------
5 Relationships & Hyperlinked APIs
----------------------------------

Use Hyperlinked APIs to improve cohesion and discoverability
use rest_framework.reverse.reverse to return fully qualified URLs

ways to represent relationships between entities:
    Using primary keys.
    Using hyperlinking between entities.
    Using a unique identifying slug field on the related entity.
    Using the default string representation of the related entity.
    Nesting the related entity inside the parent representation.
    Some other custom representation.

The HyperlinkedModelSerializer has the following differences from ModelSerializer:
    It does not include the id field by default.
    It includes a url field, using HyperlinkedIdentityField.
    Relationships use HyperlinkedRelatedField, instead of PrimaryKeyRelatedField.

Because using format suffixes, indicate on the highlight field that any format suffixed hyperlinks it returns should use the '.html' suffix ...(..., format='html')

settings in REST framework are all namespaced into a single dictionary setting, named REST_FRAMEWORK


--------------------
6 ViewSets & Routers
--------------------
ViewSets provide actions (read, update, list, detail, ...) rather than method handlers (GET, ...)

The complete set of default read/write operations (ModelViewSet):
'list', 'create', 'retrieve', 'update' and 'destroy'

@detail_route decorator to create a custom action
passing a renderer to detail_route() somehow makes sense
detail_route by default responds to GET requests. Use the method argument for others.
detail_route uses the method names to construct urls, can be overridden with url_path argument.

can create views from ViewSet class, by binding the http methods to the required action for each view.
ViewSet({'method': 'action', ...})

for the default list views:
snippet_list = SnippetViewSet({'get': 'list', 'post': 'create'})

for the default detail views:
snippet_detail = SnippetViewSet({
    'get': 'retrieve',
    'put': 'update',
    'patch': 'partial_update',
    'delete': 'destroy'
})

for the custom highlight view:
snippet_highlight = SnippetViewSet({'get': 'highlight'}, renderer_classes=[StaticHTMLRenderer])

When using ViewSets instead of Views it is not necessary to define the URLconf
DefaultRouter automatically creates the API root view 

register viewsets with a router is similar to providing urlpatterns
router.register(r'prefix', views.WhateverViewSet)

ViewSets are highly abstracted
ViewSets ensure that URL conventions will be consistent across the API, minimizes the amount of code needed, and allows for concentrating on the interactions and representations the API provides rather than the specifics of the URL conf.
Similarly to using class based generic views vs functions, using ViewSets is less explicit



Used this in the shell to change the user of the snippets:

from snippets.models import Snippet
from django.contrib.auth.models import User

scott = User.objects.filter(username="scott")[0]

Snippet.objects.filter(owner__username="other")
# <QuerySet [<Snippet: Snippet object (3)>, <Snippet: Snippet object (4)>, <Snippet: Snippet object (5)>, <Snippet: Snippet object (6)>]>
for snippet in Snippet.objects.filter(owner__username="other"):
    snippet.owner = scott
    snippet.save()

Snippet.objects.filter(owner__username="other")
# <QuerySet []>


----------------------------
7 Schemas & Client libraries
----------------------------

A schema is a machine-readable document that describes the available API endpoints, their URLS, and what operations they support.
useful for auto-generated documentation, and can also be used to drive dynamic client libraries

Core API is a format-independent Document Object Model for representing Web APIs.
Core API is a document specification for describing APIs. It is used to provide an internal representation format of the available endpoints and possible interactions that an API exposes. It can either be used server-side, or client-side.

When used server-side, Core API allows an API to support rendering to a wide range of schema or hypermedia formats.

When used client-side, Core API allows for dynamically driven client libraries that can interact with any API that exposes a supported schema or hypermedia format.

REST framework supports either explicitly defined schema views, or automatically generated schemas. Since we're using viewsets and routers, we can simply use the automatic schema generation.


The tutorial says that corejson will be available from the api root view, but it's not. It is available from /schema/ though..

This does not work:
    http http://127.0.0.1:8000/ Accept:application/coreapi+json
This works:
    http http://127.0.0.1:8000/schema/ Accept:application/coreapi+json

The default output style of coreapi is to use the Core JSON encoding
