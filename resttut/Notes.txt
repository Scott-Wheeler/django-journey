---------------
1 Serialization
---------------
Use a Serializer(rest_framework.serializer.ModelSerializer) to serialize to JSON and create and update instances
If implementing a custom serializer, implement create and update methods
Serializer classes are similar to Form classes
code = serializers.CharField(style={'base_template': 'textarea.html'}) 
.. is similar to forms.CharField(widget=widgets.Textarea)

# serialization
from rest_framework.renderers import JSONRenderer

snippet = Snippet(code='print("hello world")')
serializer = SnippetSerializer(snippet)
content = JSONRenderer().render(serializer.data)

# deserialization
from django.utils.six import BytesIO
from rest_framework.parsers import JSONParser

stream = BytesIO(content)
data = JSONParser().parse(stream)
serializer = SnippetSerializer(data=data)
serializer.is_valid()
serializer.validated_data
snippet = serializer.save()

implement the views to return JsonResponse and use GET, POST, PUT, DELETE
httpie to test


------------------------
2 Requests and Responses
------------------------

rest_framework has a Request object that extends HttpRequest
request.POST  # Only handles form data.  Only works for 'POST' method.
request.data  # Handles arbitrary data.  Works for 'POST', 'PUT' and 'PATCH' methods.

rest_framework also introduces Response object that is a type of TemplateResponse that takes unrendered content and uses content negotiation to determine the correct content type to return to the client.
return Response(data)  # Renders to content type as requested by the client.

rest_framework.status contains status codes with explicit names

use @api_view and ApiView to wrap views
ensures receiving Request instances in the view
adds context to Response objects so that content negotiation can be performed
returns 405 Method Not Allowed responses when appropriate
handles any ParseError exceptions when accessing request.data with malformed input.

using the Response object, it is no longer necessary to return JSON, it returns the appropriate content type for the client. Similar for Request. Can accept/emit any type.

format suffixes allow for choosing response format in urls
eg: http://example.com/api/items/4.json
it's only necessary to add ", format=None" to the view function headers. It seems to work without doing anything to the format parameter in the view. I guess it automatically passes it to the Response 

To control Response using Accept header:
http http://127.0.0.1:8000/snippets/ Accept:application/json  # Request JSON
http http://127.0.0.1:8000/snippets/ Accept:text/html         # Request HTML

To control Response using format suffix:
http http://127.0.0.1:8000/snippets.json  # JSON suffix
http http://127.0.0.1:8000/snippets.api   # Browsable API suffix

To control Request using the Content-Type header.
# POST using form data
http --form POST http://127.0.0.1:8000/snippets/ code="print(123)"
# POST using JSON
http --json POST http://127.0.0.1:8000/snippets/ code="print(456)"

http --debug ...

access with a browser returns a fully web-browsable HTML-formatted representation of the resource which is a huge useability win and makes developing and using the API easier

customizing the browsable api:
http://www.django-rest-framework.org/topics/browsable-api/


-------------------
3 Class based views
-------------------




